{"title":"Linux学习笔记#1：复制文件cp、docker cp与scp","date":"2020-09-19T23:28:03.000Z","date_formatted":{"ll":"Sep 20, 2020","L":"09/20/2020","MM-DD":"09-20"},"thumbnail":"https://cdn.wardzhou.art/img/toilet-paper-4974461_640.jpg","link":"2020/09/20/LinuxNote1","comments":true,"tags":["Docker","Linux"],"categories":["教程"],"updated":"2020-12-14T15:10:11.493Z","content":"<p>可能也许大概小白就要从头学吧QAQ<span id=\"more\"></span></p>\n<h2 id=\"cp命令\">CP命令<a title=\"#cp命令\" href=\"#cp命令\"></a></h2>\n<h2 id=\"语法\">语法<a title=\"#语法\" href=\"#语法\"></a></h2>\n<p>cp（英文全：copy file）命令主要用于复制文件或目录。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp [参数] 源 目的</span><br></pre></td></tr></table></figure>\n<p>可选参数</p>\n<div class=\"φbt\"><ul>\n<li><code>-a</code>：此选项通常在复制目录时使用，它保留链接、文件属性，并复制目录下的所有内容。其作用等于dpR参数组合。</li>\n<li><code>-d</code>：复制时保留链接。这里所说的链接相当于Windows系统中的快捷方式。</li>\n<li><code>-f</code>：覆盖已经存在的目标文件而不给出提示。</li>\n<li><code>-i</code>：与-f选项相反，在覆盖目标文件之前给出提示，要求用户确认是否覆盖，回答&quot;y&quot;时目标文件将被覆盖。</li>\n<li><code>-p</code>：除复制文件的内容外，还把修改时间和访问权限也复制到新文件中。</li>\n<li><code>-r</code>：若给出的源文件是一个目录文件，此时将复制该目录下所有的子目录和文件。</li>\n<li><code>-l</code>：不复制文件，只是生成链接文件。</li>\n</ul>\n</div><h2 id=\"docker-cp\">docker cp<a title=\"#docker-cp\" href=\"#docker-cp\"></a></h2>\n<h3 id=\"语法-1\">语法<a title=\"#语法-1\" href=\"#语法-1\"></a></h3>\n<p><code>docker cp</code>命令能够让你快速在宿主主机与容器之间传递文件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker cp [参数] 容器名:源 目的</span><br><span class=\"line\">docker cp [参数] 源 容器名:目的</span><br></pre></td></tr></table></figure>\n<p><code>-L</code> ：保持源目标中的链接</p>\n<h2 id=\"示例\">示例<a title=\"#示例\" href=\"#示例\"></a></h2>\n<p>将主机/home/data目录拷贝到容器mycontainer的/dir目录下。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker cp /home/data mycontainer:/dir/</span><br></pre></td></tr></table></figure>\n<p>将主机/home/data目录拷贝到容器mycontainer中，目录重命名为rename。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker cp /home/data mycontainer:/rename</span><br></pre></td></tr></table></figure>\n<p>将容器mycontainer的/data目录拷贝到主机的/tmp目录中。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker cp  mycontainer:/data /tmp/</span><br></pre></td></tr></table></figure>\n<h2 id=\"scp\">SCP<a title=\"#scp\" href=\"#scp\"></a></h2>\n<p><code>scp</code> 命令用于 主机之间复制文件和目录。</p>\n<blockquote>\n<p>scp 是 secure copy 的缩写, scp 是 linux 系统下基于 ssh 登陆进行安全的远程文件拷贝命令。</p>\n</blockquote>\n<h3 id=\"语法-2\">语法<a title=\"#语法-2\" href=\"#语法-2\"></a></h3>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp [参数] 文件源 目的 </span><br></pre></td></tr></table></figure>\n<p>可选参数</p>\n<div class=\"φbt\"><ul>\n<li><code>-1</code>： 强制scp命令使用协议ssh1</li>\n<li><code>-2</code>： 强制scp命令使用协议ssh2</li>\n<li><code>-4</code>： 强制scp命令只使用IPv4寻址</li>\n<li><code>-6</code>： 强制scp命令只使用IPv6寻址</li>\n<li><code>-B</code>： 使用批处理模式（传输过程中不询问传输口令或短语）</li>\n<li><code>-C</code>： 允许压缩。（将-C标志传递给ssh，从而打开压缩功能）</li>\n<li><code>-p</code>：保留原文件的修改时间，访问时间和访问权限。</li>\n<li><code>-q</code>： 不显示传输进度条。</li>\n<li><code>-r</code>： 递归复制整个目录。</li>\n<li><code>-v</code>：详细方式显示输出。scp和ssh(1)会显示出整个过程的调试信息。这些信息用于调试连接，验证和配置问题。</li>\n<li><code>-c cipher</code>： 以cipher将数据传输进行加密，这个选项将直接传递给ssh。</li>\n<li><code>-F ssh_config</code>： 指定一个替代的ssh配置文件，此参数直接传递给ssh。</li>\n<li><code>-i identity_file</code>： 从指定文件中读取传输时使用的密钥文件，此参数直接传递给ssh。</li>\n<li><code>-l limit</code>： 限定用户所能使用的带宽，以Kbit/s为单位。</li>\n<li><code>-o ssh_option</code>： 如果习惯于使用ssh_config(5)中的参数传递方式，</li>\n<li><code>-P port</code>：注意是大写的P, port是指定数据传输用到的端口号</li>\n<li><code>-S program</code>： 指定加密传输时所使用的程序。此程序必须能够理解ssh(1)的选项。</li>\n</ul>\n</div><h3 id=\"示例-1\">示例<a title=\"#示例-1\" href=\"#示例-1\"></a></h3>\n<p>远程与本地之间复制</p>\n<h4 id=\"文件\">文件<a title=\"#文件\" href=\"#文件\"></a></h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp 本地文件 本地文件夹@远程IP:远程文件夹 </span><br><span class=\"line\">或者 </span><br><span class=\"line\">scp 本地文件 远程用户名@远程IP:远程文件 </span><br><span class=\"line\">或者 </span><br><span class=\"line\">scp 本地文件 远程IP:远程文件夹 </span><br><span class=\"line\">或者 </span><br><span class=\"line\">scp 本地文件 远程IP:远程文件 </span><br></pre></td></tr></table></figure>\n<h4 id=\"文件夹\">文件夹<a title=\"#文件夹\" href=\"#文件夹\"></a></h4>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp -r 本地文件夹 本地文件夹@远程IP:远程文件夹  </span><br><span class=\"line\">scp -r 本地文件夹 远程IP:远程文件夹 </span><br></pre></td></tr></table></figure>\n<p>可以直接在<code>目的</code>路径中指定复制后的文件名和文件夹名，如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp /home/hello.txt birch@123.421.1.4:/home/renamed.txt </span><br><span class=\"line\">scp -r /home/dir birch@123.421.1.4:/home/redir/</span><br></pre></td></tr></table></figure>\n<h4 id=\"\"><a title=\"#\" href=\"#\"></a></h4>\n<blockquote>\n<p>参考：<a href=\"https://www.runoob.com/\" target=\"_blank\">https://www.runoob.com/</a></p>\n</blockquote>\n","prev":{"title":"Linux学习笔记#2：docker安装和使用","link":"2020/09/21/LinuxNote2"},"next":{"title":"苹果 vs Epic ，平台垄断下开发者的挣扎与抉择","link":"2020/09/09/AppleEpic"},"plink":"http://wardzhou.art/2020/09/20/LinuxNote1/","toc":[{"id":"cp命令","title":"CP命令","index":"1"},{"id":"语法","title":"语法","index":"2"},{"id":"docker-cp","title":"docker cp","index":"3","children":[{"id":"语法-1","title":"语法","index":"3.1"}]},{"id":"示例","title":"示例","index":"4"},{"id":"scp","title":"SCP","index":"5","children":[{"id":"语法-2","title":"语法","index":"5.1"},{"id":"示例-1","title":"示例","index":"5.2"}]}],"reward":true,"copyright":{"author":"白桦 Birch","license":"Attribution-NonCommercial-NoDerivatives 4.0 International(<a href=\"https://creativecommons.org/licenses/by-nc-nd/4.0/\" rel=\\\"external nofollow\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","updated":"December 14, 2020"},"reading_time":"978 words in 7 min"}